Labs
Using AWS Lambda with Go
29 Jan 2019

superluminar GmbH

* Lab 0 - Form teams

- Form teams of 3.
- For each lab write down key questions (max 2!).
- Stick them to the wall.
- We'll go through the questions after each lab.

* Lab 1

- Bootstrap serverless app
- Build and deploy the app
- Run / invoke the functions

* Lab 2

- Modify the *hello* function to accept a *name* parameter and respond with a greeting
- Create some log messages
- Find out how to display log messages

* Lab 3

Implement a URL shortener using `DynamoDB` for storage with two functions.

- One function to create shortened URLs

 curl -v -XPOST -d url=https://godays.io https://$ENDPOINT/create-url

 > POST /create-url HTTP/1.1
 < HTTP/1.1 Created 201
 Created short url: http://$ENDPOINT/${short-url}

- One function to retrieve and redirect to the shortened URL

 curl -v http://$ENDPOINT/${short-url}

 > GET /${short-url} HTTP/1.1
 < HTTP/1.1 302 Found
 < Location: https://godays.io

* Lab 4

- Write a unit test to mock out AWS dependencies
- Use `github.com/stretchr/testify/mock` (or what ever framework you prefer)
- Test what happens when your handler can't find the short url in your storage

* Lab 5

- Create a new function
- Create a new table
- Hook up the function to the DynamoDB stream of the url-shortener table
- Fetch preview using e.g. https://github.com/badoux/goscraper
- Save the preview to the new table


* Lab 6

- Install and activate the tracing plugin
- Give IAM permissions to your function to use X-Ray
- Instrument your code (use version > v1.0.0-rc.1 of `github.com/aws/aws-xray-sdk-go`)
- Generate some traces by calling your function
- Checkout your traces using the AWS Console
