GoDays
Using AWS Lambda with Go
29 Jan 2019

superluminar GmbH

* Install serverless

 $ npm install -g serverless

* Our first application

 $ serverless create -t aws-go-dep -p godays-workshop
 Serverless: Generating boilerplate...
 Serverless: Generating boilerplate in "/Users/jan/Code/src/github.com/superluminar-io/godays-workshop"
  _______                             __
 |   _   .-----.----.--.--.-----.----|  .-----.-----.-----.
 |   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|
 |____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|
 |   |   |             The Serverless Application Framework
 |       |                           serverless.com, v1.35.1
  -------'
 
 Serverless: Successfully generated boilerplate for template: "aws-go-dep"

* Build it!

 $ make
 dep ensure -v
 Root project is "github.com/superluminar-io/godays-workshop"
  2 transitively valid internal packages
  2 external packages imported from 1 projects
 (0)   âœ“ select (root)
 (1)	? attempt github.com/aws/aws-lambda-go with 2 pkgs; 14 versions to try
 (1)	    try github.com/aws/aws-lambda-go@v1.8.1
 (1)	âœ“ select github.com/aws/aws-lambda-go@v1.8.1 w/4 pkgs
   âœ“ found solution with 4 packages from 1 projects

 Solver wall times by segment:
   ...

   TOTAL: 1.805310905s

 (1/1) Wrote github.com/aws/aws-lambda-go@v1.8.1
 env GOOS=linux go build -ldflags="-s -w" -o bin/hello hello/main.go
 env GOOS=linux go build -ldflags="-s -w" -o bin/world world/main.go

* Deploy it!
 $ severless deploy
 Serverless: Packaging service...
 Serverless: Excluding development dependencies...
 Serverless: Creating Stack...
 Serverless: Checking Stack create progress...
 .....
 Serverless: Stack create finished...
 Serverless: Uploading CloudFormation file to S3...
 Serverless: Uploading artifacts...
 Serverless: Uploading service .zip file to S3 (10.78 MB)...
 Serverless: Validating template...
 Serverless: Updating Stack...
 Serverless: Checking Stack update progress...

* Deploy it!
  Serverless: Stack update finished...
  Service Information
  service: godays-workshop
  stage: dev
  region: eu-central-1
  stack: godays-workshop-dev
  api keys:
    None
  endpoints:
    GET - https://7gxzpfmtk5.execute-api.eu-central-1.amazonaws.com/dev/hello
    GET - https://7gxzpfmtk5.execute-api.eu-central-1.amazonaws.com/dev/world
  functions:
    hello: godays-workshop-dev-hello
    world: godays-workshop-dev-world
  layers:
    None

* Curl it!
 $ curl https://7gxzpfmtk5.execute-api.eu-central-1.amazonaws.com/dev/hello
 {"message":"Go Serverless v1.0! Your function executed successfully!"}%

* How does it work?
You configure a Serverless project using `serverless.yml`.

.code ./serverless.yml 1,20

* What are functions?
- Functions have a name
- Functions have a handler - the executable
- Functions are triggered by events - e.g. the HTTP request

.code ./serverless.yml /functions:/,$

* Where is the code?

- We include the compiled binaries
- We exclude everything else (the source code)

.code ./serverless.yml /package:/,/method:/

* Wie sieht der Code aus?

.code ./hello/main.go /Handler/,$

* Wie kÃ¶nnen wir eine Funktion aufrufen?
 $ serverless invoke -f hello
 {
   "statusCode": 200,
   "body": "{\"message\":\"Go Serverless Webpack (Typescript) v1.0! Your function executed successfully!\",\"input\":{}}"
 }

* Wie kommen wir an Logs?
- Logs werden von `CloudWatch Logs` verwaltet
- Jede Lambda-Funktion loggt in eine `LogGroup`
 $ serverless logs -r eu-central-1 -f hello
 START RequestId: 9847ec27-1381-11e9-83e5-638bc1812824 Version: $LATEST
 END RequestId: 9847ec27-1381-11e9-83e5-638bc1812824
 REPORT RequestId: 9847ec27-1381-11e9-83e5-638bc1812824	Duration: 7.57 ms	Billed Duration: 100 ms 	Memory Size: 1024 MB	Max Memory Used: 46 MB

* Gibt es auch Metriken?
- Metriken werden in `CloudWatch` gesammelt
- Erfasst werden `Invocations`, `Errors`, `Duration` etc.
.image ./images/cloudwatch.png 300 _
.link https://docs.aws.amazon.com/lambda/latest/dg/monitoring-functions-metrics.html Lambda Metrics

* Wie ist das ganze aufgebaut?
.image ./images/simple-web-service.png
.caption _Image_ by [[https://www.jeremydaly.com/serverless-microservice-patterns-for-aws/][Jeremy Daly]]

.link https://www.jeremydaly.com/serverless-microservice-patterns-for-aws/ Entwurfsmuster

* Serverless und Cloudformation
Hinter den Kulissen verwendet Serverless `CloudFormation`.
.image ./images/cloudformation-template-update-stack-designer.png 600 _

* Unsere Anwendung wieder lÃ¶schen

 $ serverless remove
 Serverless: Getting all objects in S3 bucket...
 Serverless: Removing objects in S3 bucket...
 Serverless: Removing Stack...
 Serverless: Checking Stack removal progress...
 ....................
 Serverless: Stack removal finished...

* ðŸŽ‰ Das war's

Danke ...

